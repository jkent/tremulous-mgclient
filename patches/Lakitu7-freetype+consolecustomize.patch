Index: src/renderer/tr_font.c
===================================================================
--- src/renderer/tr_font.c	(revision 1117)
+++ src/renderer/tr_font.c	(working copy)
@@ -75,6 +75,7 @@
 #include "../qcommon/qcommon.h"
 
 #ifdef BUILD_FREETYPE
+
 #include <ft2build.h>
 #include <freetype/fterrors.h>
 #include <freetype/ftsystem.h>
@@ -89,7 +90,7 @@
 FT_Library ftLibrary = NULL;  
 #endif
 
-#define MAX_FONTS 6
+#define MAX_FONTS 12
 static int registeredFontCount = 0;
 static fontInfo_t registeredFont[MAX_FONTS];
 
@@ -146,11 +147,13 @@
   return NULL;
 }
 
-void WriteTGA (char *filename, byte *data, int width, int height) {
+static void WriteTGA(char *filename, byte * data, int width, int height)
+{
 	byte	*buffer;
 	int		i, c;
 
 	buffer = Z_Malloc(width*height*4 + 18);
+
 	Com_Memset (buffer, 0, 18);
 	buffer[2] = 2;		// uncompressed type
 	buffer[12] = width&255;
@@ -169,12 +172,27 @@
 		buffer[i+3] = data[i-18+3];		// alpha
 	}
 
+	// Tr3B: flip upside down
+	{
+		int             row;
+		unsigned char  *flip;
+		unsigned char  *src, *dst;
+
+		flip = (unsigned char *)malloc(width * 4);
+		for(row = 0; row < height / 2; row++)
+		{
+			src = buffer + 18 + (row * 4 * width);
+			dst = buffer + 18 + ((height - row - 1) * 4 * width);
+
+			memcpy(flip, src, width * 4);
+			memcpy(src, dst, width * 4);
+			memcpy(dst, flip, width * 4);
+		}
+		free(flip);
+	}
+
 	ri.FS_WriteFile(filename, buffer, c);
 
-	//f = fopen (filename, "wb");
-	//fwrite (buffer, 1, c, f);
-	//fclose (f);
-
 	Z_Free (buffer);
 }
 
@@ -340,7 +358,8 @@
 #endif
   void *faceData;
 	int i, len;
-  char name[1024];
+	char  name[MAX_QPATH];
+	char  strippedName[MAX_QPATH];
 	float dpi = 72;											//
 	float glyphScale =  72.0f / dpi; 		// change the scale to be relative to 1 based on 72 dpi ( so dpi of 144 means a scale of .5 )
 
@@ -364,14 +383,24 @@
     return;
   }
 
-	Com_sprintf(name, sizeof(name), "fonts/fontImage_%i.dat",pointSize);
-	for (i = 0; i < registeredFontCount; i++) {
-		if (Q_stricmp(name, registeredFont[i].name) == 0) {
-			Com_Memcpy(font, &registeredFont[i], sizeof(fontInfo_t));
-			return;
-		}
-	}
+	COM_StripExtension(fontName, strippedName, sizeof(strippedName));
+    //Compatibility: If there is no extension, assume this is loading one of the legacy fonts
+    if(!Q_stricmp(strippedName, fontName))
+    {
+        Com_sprintf(name, sizeof(name), "fonts/fontImage_%i.dat",pointSize);
+    }
+    else
+    {
+        Com_sprintf(name, sizeof(name), "%s_%i.dat", strippedName, pointSize);
+    }
 
+    for (i = 0; i < registeredFontCount; i++) {
+        if (Q_stricmp(name, registeredFont[i].name) == 0) {
+            Com_Memcpy(font, &registeredFont[i], sizeof(fontInfo_t));
+            return;
+        }
+    }
+
 	len = ri.FS_ReadFile(name, NULL);
 	if (len == sizeof(fontInfo_t)) {
 		ri.FS_ReadFile(name, &faceData);
@@ -413,9 +442,11 @@
     return;
   }
 
+  Com_sprintf(name, sizeof(name), "%s", fontName);
+
   len = ri.FS_ReadFile(fontName, &faceData);
   if (len <= 0) {
-    ri.Printf(PRINT_ALL, "RE_RegisterFont: Unable to read font file\n");
+    ri.Printf(PRINT_ALL, "RE_RegisterFont: Unable to read font file %s\n", name);
     return;
   }
 
@@ -431,6 +462,7 @@
     return;
   }
 
+
   //*font = &registeredFonts[registeredFontCount++];
 
   // make a 256x256 image buffer, once it is full, register it, clean it and keep going 
@@ -455,32 +487,40 @@
   lastStart = i;
   imageNumber = 0;
 
-  while ( i <= GLYPH_END ) {
-
+	while(i <= GLYPH_END)
+	{
     glyph = RE_ConstructGlyphInfo(out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qfalse);
 
-    if (xOut == -1 || yOut == -1 || i == GLYPH_END)  {
+		if(xOut == -1 || yOut == -1 || i == GLYPH_END)
+		{
+			if(xOut == -1 || yOut == -1)
+			{
+				//ri.Printf(PRINT_WARNING, "RE_RegisterFont: character %c does not fit image number %i\n", (unsigned char) i, imageNumber);
+			}
+
       // ran out of room
       // we need to create an image from the bitmap, set all the handles in the glyphs to this point
-      // 
-
       scaledSize = 256*256;
       newSize = scaledSize * 4;
       imageBuff = Z_Malloc(newSize);
       left = 0;
       max = 0;
       satLevels = 255;
-      for ( k = 0; k < (scaledSize) ; k++ ) {
-        if (max < out[k]) {
+			for(k = 0; k < (scaledSize); k++)
+			{
+				if(max < out[k])
+				{
           max = out[k];
         }
       }
 
-			if (max > 0) {
+			if(max > 0)
+			{
 				max = 255/max;
 			}
 
-      for ( k = 0; k < (scaledSize) ; k++ ) {
+			for(k = 0; k < (scaledSize); k++)
+			{
         imageBuff[left++] = 255;
         imageBuff[left++] = 255;
         imageBuff[left++] = 255;
@@ -488,25 +528,43 @@
         imageBuff[left++] = ((float)out[k] * max);
       }
 
-			Com_sprintf (name, sizeof(name), "fonts/fontImage_%i_%i.tga", imageNumber++, pointSize);
-			if (r_saveFontData->integer) { 
+			Com_sprintf(name, sizeof(name), "%s_%i_%i.tga", strippedName, imageNumber++, pointSize);
+			if(!ri.FS_FileExists(name) && r_saveFontData->integer)  
+			{
 			  WriteTGA(name, imageBuff, 256, 256);
 			}
 
-    	//Com_sprintf (name, sizeof(name), "fonts/fontImage_%i_%i", imageNumber++, pointSize);
-      image = R_CreateImage(name, imageBuff, 256, 256, qfalse, qfalse, GL_CLAMP_TO_EDGE);
-      h = RE_RegisterShaderFromImage(name, LIGHTMAP_2D, image, qfalse);
-      for (j = lastStart; j < i; j++) {
-        font->glyphs[j].glyph = h;
-				Q_strncpyz(font->glyphs[j].shaderName, name, sizeof(font->glyphs[j].shaderName));
-      }
-      lastStart = i;
+            /*`image = R_CreateImage(name, imageBuff, 256, 256, IF_NOPICMIP, FT_LINEAR, WT_CLAMP);`*/
+            image = R_CreateImage(name, imageBuff, 256, 256, qfalse, qfalse, GL_CLAMP_TO_EDGE);
+            /*`h = RE_RegisterShaderFromImage(name, image, qfalse);`*/
+            h = RE_RegisterShaderFromImage(name, LIGHTMAP_2D, image, qfalse);
+			
 		  Com_Memset(out, 0, 1024*1024);
       xOut = 0;
       yOut = 0;
       Z_Free(imageBuff);
-			i++;
-    } else {
+
+			if(i == GLYPH_END)
+			{
+				for(j = lastStart; j <= GLYPH_END; j++)
+				{
+					font->glyphs[j].glyph = h;
+					Q_strncpyz(font->glyphs[j].shaderName, name, sizeof(font->glyphs[j].shaderName));
+				}
+				break;
+			}
+			else
+			{
+				for(j = lastStart; j < i; j++)
+				{
+					font->glyphs[j].glyph = h;
+					Q_strncpyz(font->glyphs[j].shaderName, name, sizeof(font->glyphs[j].shaderName));
+				}
+				lastStart = i;
+			}
+		}
+		else
+		{
       Com_Memcpy(&font->glyphs[i], glyph, sizeof(glyphInfo_t));
       i++;
     }
@@ -514,10 +572,14 @@
 
 	registeredFont[registeredFontCount].glyphScale = glyphScale;
 	font->glyphScale = glyphScale;
-  Com_Memcpy(&registeredFont[registeredFontCount++], font, sizeof(fontInfo_t));
 
-	if (r_saveFontData->integer) { 
-		ri.FS_WriteFile(va("fonts/fontImage_%i.dat", pointSize), font, sizeof(fontInfo_t));
+	Com_sprintf(name, sizeof(name), "%s_%i.dat", strippedName, pointSize);
+	Q_strncpyz(font->name, name, sizeof(font->name));
+	Com_Memcpy(&registeredFont[registeredFontCount++], font, sizeof(fontInfo_t));
+
+	if(!ri.FS_FileExists(name) && r_saveFontData->integer) 
+	{
+        ri.FS_WriteFile(name, font, sizeof(fontInfo_t));
 	}
 
   Z_Free(out);
Index: src/qcommon/files.c
===================================================================
--- src/qcommon/files.c	(revision 1117)
+++ src/qcommon/files.c	(working copy)
@@ -1090,6 +1090,8 @@
 					if ( !(pak->referenced & FS_GENERAL_REF)) {
 						if ( Q_stricmp(filename + l - 7, ".shader") != 0 &&
 							Q_stricmp(filename + l - 4, ".txt") != 0 &&
+							Q_stricmp(filename + l - 4, ".ttf") != 0 &&
+							Q_stricmp(filename + l - 4, ".otf") != 0 &&
 							Q_stricmp(filename + l - 4, ".cfg") != 0 &&
 							Q_stricmp(filename + l - 7, ".config") != 0 &&
 							strstr(filename, "levelshots") == NULL &&
@@ -1158,6 +1160,8 @@
 			if ( fs_numServerPaks ) {
 
 				if ( Q_stricmp( filename + l - 4, ".cfg" )		// for config files
+					&& Q_stricmp( filename + l - 4, ".otf" )
+					&& Q_stricmp( filename + l - 4, ".ttf" )
 					&& Q_stricmp( filename + l - 5, ".menu" )	// menu files
 					&& Q_stricmp( filename + l - 5, ".game" )	// menu files
 					&& Q_stricmp( filename + l - strlen(demoExt), demoExt )	// menu files
@@ -1175,6 +1179,8 @@
 			}
 
 			if ( Q_stricmp( filename + l - 4, ".cfg" )		// for config files
+				&& Q_stricmp( filename + l - 4, ".ttf" )
+				&& Q_stricmp( filename + l - 4, ".otf" )
 				&& Q_stricmp( filename + l - 5, ".menu" )	// menu files
 				&& Q_stricmp( filename + l - 5, ".game" )	// menu files
 				&& Q_stricmp( filename + l - strlen(demoExt), demoExt )	// menu files
Index: src/client/cl_scrn.c
===================================================================
--- src/client/cl_scrn.c	(revision 1117)
+++ src/client/cl_scrn.c	(working copy)
@@ -148,12 +148,38 @@
 	fcol = col*0.0625;
 	size = 0.0625;
 
-	re.DrawStretchPic( ax, ay, aw, ah,
+    re.DrawStretchPic( ax, ay, aw, ah,
 					   fcol, frow, 
 					   fcol + size, frow + size, 
 					   cls.charSetShader );
 }
 
+void SCR_DrawConsoleFontChar( float x, float y, int ch )
+{
+
+    if( cls.useLegacyConsoleFont )
+    {
+        SCR_DrawSmallChar( (int) x, (int) y, ch );
+        return;
+    }
+
+    if(ch==' ') return;
+
+    fontInfo_t *font = &cls.consoleFont;
+
+    glyphInfo_t *glyph = &font->glyphs[ch];
+
+    float yadj = glyph->top;
+
+
+    float xadj = (SCR_ConsoleFontCharWidth( ch ) - glyph->xSkip) / 2.0;
+
+    re.DrawStretchPic( x+xadj, y-yadj, glyph->imageWidth, glyph->imageHeight,
+					   glyph->s, glyph->t, 
+					   glyph->s2, glyph->t2, 
+					   glyph->glyph );
+}
+
 /*
 ** SCR_DrawSmallChar
 ** small chars are drawn at native screen resolution
@@ -186,7 +212,50 @@
 					   cls.charSetShader );
 }
 
+float SCR_ConsoleFontCharWidth( int ch )
+{
+    fontInfo_t *font = &cls.consoleFont;
+    glyphInfo_t *glyph = &font->glyphs[ch];
+    float width = glyph->xSkip + cl_consoleFontKerning->value;
 
+    if( cls.useLegacyConsoleFont ) return SMALLCHAR_WIDTH;
+
+    return (width);
+}
+
+
+float SCR_ConsoleFontCharHeight( )
+{
+    fontInfo_t *font = &cls.consoleFont;
+    int ch = 'I' & 0xff;
+    glyphInfo_t *glyph = &font->glyphs[ch];
+    float vpadding = 0.3 * cl_consoleFontSize->value;
+
+    if( cls.useLegacyConsoleFont ) return SMALLCHAR_HEIGHT;
+
+
+    return (glyph->imageHeight + vpadding);
+}
+
+
+float SCR_ConsoleFontStringWidth( const char* s, int len )
+{
+    int i;
+    fontInfo_t *font = &cls.consoleFont;
+    float width = 0;
+
+    if( cls.useLegacyConsoleFont ) return len * SMALLCHAR_WIDTH;
+
+    for(i=0;i<len;i++)
+    {
+        int ch = s[i] & 0xff;
+        glyphInfo_t *glyph = &font->glyphs[ch];
+        width += glyph->xSkip + cl_consoleFontKerning->value;
+    }
+    return (width);
+}
+
+
 /*
 ==================
 SCR_DrawBigString[Color]
@@ -267,7 +336,7 @@
 		qboolean noColorEscape ) {
 	vec4_t		color;
 	const char	*s;
-	int			xx;
+	float       xx;
 
 	// draw the colored text
 	s = string;
@@ -283,8 +352,8 @@
 			s += 2;
 			continue;
 		}
-		SCR_DrawSmallChar( xx, y, *s );
-		xx += SMALLCHAR_WIDTH;
+        SCR_DrawConsoleFontChar( xx, y, *s );
+        xx += SCR_ConsoleFontCharWidth( *s );
 		s++;
 	}
 	re.SetColor( NULL );
Index: src/client/client.h
===================================================================
--- src/client/client.h	(revision 1117)
+++ src/client/client.h	(working copy)
@@ -344,6 +344,9 @@
 	qhandle_t	charSetShader;
 	qhandle_t	whiteShader;
 	qhandle_t	consoleShader;
+
+    qboolean useLegacyConsoleFont;
+    fontInfo_t  consoleFont; 
 } clientStatic_t;
 
 extern	clientStatic_t		cls;
@@ -403,6 +406,12 @@
 
 extern	cvar_t	*cl_consoleKeys;
 
+extern  cvar_t  *cl_consoleColor;
+extern  cvar_t  *cl_consoleHeight;
+extern  cvar_t  *cl_consoleFont;
+extern  cvar_t  *cl_consoleFontSize;
+extern  cvar_t  *cl_consoleFontKerning;
+
 #ifdef USE_MUMBLE
 extern	cvar_t	*cl_useMumble;
 extern	cvar_t	*cl_mumbleScale;
@@ -560,6 +569,10 @@
 void	SCR_DrawBigStringColor( int x, int y, const char *s, vec4_t color, qboolean noColorEscape );	// ignores embedded color control characters
 void	SCR_DrawSmallStringExt( int x, int y, const char *string, float *setColor, qboolean forceColor, qboolean noColorEscape );
 void	SCR_DrawSmallChar( int x, int y, int ch );
+void    SCR_DrawConsoleFontChar( float x, float y, int ch );
+float   SCR_ConsoleFontCharWidth( int ch );
+float   SCR_ConsoleFontCharHeight ( void );
+float   SCR_ConsoleFontStringWidth( const char *s, int len );
 
 
 //
Index: src/client/cl_main.c
===================================================================
--- src/client/cl_main.c	(revision 1117)
+++ src/client/cl_main.c	(working copy)
@@ -99,6 +99,13 @@
 
 cvar_t	*cl_consoleKeys;
 
+cvar_t  *cl_consoleColor;
+cvar_t  *cl_consoleHeight;
+cvar_t  *cl_consoleFont;
+cvar_t  *cl_consoleFontSize;
+cvar_t  *cl_consoleFontKerning;
+
+
 clientActive_t		cl;
 clientConnection_t	clc;
 clientStatic_t		cls;
@@ -2657,13 +2664,39 @@
 ============
 */
 void CL_InitRenderer( void ) {
+	fileHandle_t f; 
+
 	// this sets up the renderer and calls R_Init
 	re.BeginRegistration( &cls.glconfig );
 
 	// load character sets
 	cls.charSetShader = re.RegisterShader( "gfx/2d/bigchars" );
+
+    cls.useLegacyConsoleFont = qtrue;
+
+#ifdef BUILD_FREETYPE
+
+    // Register console font specified by cl_consoleFont, if any
+    // filehandle is unused but forces FS_FOpenFileRead() to heed purecheck because it does not when filehandle is NULL 
+    if( *cl_consoleFont->string )
+    {
+      if( FS_FOpenFileRead( cl_consoleFont->string, &f, FS_READ ) >= 0 ) 
+      {
+        re.RegisterFont( cl_consoleFont->string, cl_consoleFontSize->integer, &cls.consoleFont);
+        cls.useLegacyConsoleFont = qfalse;
+      }
+      FS_FCloseFile( f );
+    }
+
+#endif
+
 	cls.whiteShader = re.RegisterShader( "white" );
-	cls.consoleShader = re.RegisterShader( "console" );
+
+    // For committing to Trem SVN, use "console" and change core.shader to use white instead of black.tga, 
+    // so that the console background image can be configured via that file and still let user color configuration work. 
+    // For inclusion in 1.1 clients, use "white" so that custom colors can be set and just skip the "console" shader altogether.
+	cls.consoleShader = re.RegisterShader( "white" );
+
 	g_console_field_width = cls.glconfig.vidWidth / SMALLCHAR_WIDTH - 2;
 	g_consoleField.widthInChars = g_console_field_width;
 }
@@ -2986,7 +3019,7 @@
 	cl_cURLLib = Cvar_Get("cl_cURLLib", DEFAULT_CURL_LIB, CVAR_ARCHIVE);
 #endif
 
-	cl_conXOffset = Cvar_Get ("cl_conXOffset", "0", 0);
+	cl_conXOffset = Cvar_Get ("cl_conXOffset", "3", 0);
 #ifdef MACOS_X
 	// In game video is REALLY slow in Mac OS X right now due to driver slowness
 	cl_inGameVideo = Cvar_Get ("r_inGameVideo", "0", CVAR_ARCHIVE);
@@ -3022,6 +3055,12 @@
 	// 0x7e = ~ and 0x60 = `
 	cl_consoleKeys = Cvar_Get( "cl_consoleKeys", "0x7e 0x60", CVAR_ARCHIVE);
 
+	cl_consoleColor = Cvar_Get ("cl_consoleColor", "0.0 0.0 0.0 1.0", CVAR_ARCHIVE);
+	cl_consoleHeight = Cvar_Get ("cl_consoleHeight", "50", CVAR_ARCHIVE);
+	cl_consoleFont = Cvar_Get ("cl_consoleFont", "", CVAR_ARCHIVE | CVAR_LATCH);
+	cl_consoleFontSize = Cvar_Get ("cl_consoleFontSize", "16", CVAR_ARCHIVE | CVAR_LATCH);
+	cl_consoleFontKerning = Cvar_Get ("cl_consoleFontKerning", "0", CVAR_ARCHIVE);
+
 	// userinfo
 	Cvar_Get ("name", Sys_GetCurrentUser( ), CVAR_USERINFO | CVAR_ARCHIVE );
 
Index: src/client/cl_console.c
===================================================================
--- src/client/cl_console.c	(revision 1117)
+++ src/client/cl_console.c	(working copy)
@@ -30,7 +30,7 @@
 
 #define	NUM_CON_TIMES 4
 
-#define		CON_TEXTSIZE	32768
+#define		CON_TEXTSIZE	327680
 typedef struct {
 	qboolean	initialized;
 
@@ -60,9 +60,6 @@
 
 #define	DEFAULT_CONSOLE_WIDTH	78
 
-vec4_t	console_color = {1.0, 1.0, 1.0, 1.0};
-
-
 /*
 ================
 Con_ToggleConsole_f
@@ -392,14 +389,14 @@
 		return;
 	}
 
-	y = con.vislines - ( SMALLCHAR_HEIGHT * 2 );
+	y = con.vislines - ( SCR_ConsoleFontCharHeight() * 2 ) + 2 ;
 
 	re.SetColor( con.color );
 
-	SCR_DrawSmallChar( con.xadjust + 1 * SMALLCHAR_WIDTH, y, ']' );
+	SCR_DrawConsoleFontChar( con.xadjust + cl_conXOffset->integer, y, ']' );
 
-	Field_Draw( &g_consoleField, con.xadjust + 2 * SMALLCHAR_WIDTH, y,
-		SCREEN_WIDTH - 3 * SMALLCHAR_WIDTH, qtrue, qtrue );
+	Field_Draw( &g_consoleField, con.xadjust + cl_conXOffset->integer + SCR_ConsoleFontCharWidth(']'), y,
+		SCREEN_WIDTH - 3 * SCR_ConsoleFontCharWidth(' '), qtrue, qtrue );
 }
 
 /*
@@ -430,19 +427,35 @@
 	con.xadjust = 0;
 	SCR_AdjustFrom640( &con.xadjust, NULL, NULL, NULL );
 
+
+    // read from cl_consoleColor, default to black on failure
+    char *s = cl_consoleColor->string, *end;
+    for( i=0; i<4; i++)
+    {
+        color[ i ] = strtod( s, &end );
+        if( s == end) //no digits read
+        {
+            if( i < 3 ) color[ i ] = 0.0;
+            else color [ i ] = 1.0;
+        }
+        else
+            s = end;
+    }
+
 	// draw the background
 	y = frac * SCREEN_HEIGHT - 2;
 	if ( y < 1 ) {
 		y = 0;
 	}
 	else {
-		SCR_DrawPic( 0, 0, SCREEN_WIDTH, y, cls.consoleShader );
+        re.SetColor( color );
+        SCR_DrawPic( 0, 0, SCREEN_WIDTH, y, cls.consoleShader );
+        re.SetColor( NULL );
 	}
 
-	color[0] = 1;
-	color[1] = 0;
-	color[2] = 0;
-	color[3] = 1;
+    color[0] = 1;
+    color[1] = 0;
+    color[2] = 0;
 	SCR_FillRect( 0, y, SCREEN_WIDTH, 2, color );
 
 
@@ -451,30 +464,31 @@
 	re.SetColor( g_color_table[ColorIndex(COLOR_RED)] );
 
 	i = strlen( Q3_VERSION );
-
+    float totalwidth = SCR_ConsoleFontStringWidth( Q3_VERSION, i ) + cl_conXOffset->integer;
+    float currentWidthLocation = 0;
 	for (x=0 ; x<i ; x++) {
 
-		SCR_DrawSmallChar( cls.glconfig.vidWidth - ( i - x ) * SMALLCHAR_WIDTH, 
-			(lines-(SMALLCHAR_HEIGHT+SMALLCHAR_HEIGHT/2)), Q3_VERSION[x] );
+        SCR_DrawConsoleFontChar( cls.glconfig.vidWidth - totalwidth + currentWidthLocation, lines-SCR_ConsoleFontCharHeight(), Q3_VERSION[x] );
+        currentWidthLocation += SCR_ConsoleFontCharWidth( Q3_VERSION[x] );
 
 	}
 
 
 	// draw the text
 	con.vislines = lines;
-	rows = (lines-SMALLCHAR_WIDTH)/SMALLCHAR_WIDTH;		// rows of text to draw
+	rows = (lines)/SCR_ConsoleFontCharHeight();		// rows of text to draw
 
-	y = lines - (SMALLCHAR_HEIGHT*3);
+	y = lines - (SCR_ConsoleFontCharHeight()*3);
 
 	// draw from the bottom up
 	if (con.display != con.current)
 	{
 	// draw arrows to show the buffer is backscrolled
-		re.SetColor( g_color_table[ColorIndex(COLOR_RED)] );
-		for (x=0 ; x<con.linewidth ; x+=4)
-			SCR_DrawSmallChar( con.xadjust + (x+1)*SMALLCHAR_WIDTH, y, '^' );
-		y -= SMALLCHAR_HEIGHT;
-		rows--;
+	    re.SetColor( g_color_table[ColorIndex(COLOR_RED)] );
+        for (x=0 ; x<con.linewidth ; x+=4)
+            SCR_DrawConsoleFontChar( con.xadjust + (x+1)*SMALLCHAR_WIDTH, y, '^' );
+        y -= SCR_ConsoleFontCharHeight();
+        rows--;
 	}
 	
 	row = con.display;
@@ -486,7 +500,7 @@
 	currentColor = 7;
 	re.SetColor( g_color_table[currentColor] );
 
-	for (i=0 ; i<rows ; i++, y -= SMALLCHAR_HEIGHT, row--)
+	for (i=0 ; i<rows ; i++, y -= SCR_ConsoleFontCharHeight(), row--)
 	{
 		if (row < 0)
 			break;
@@ -497,16 +511,15 @@
 
 		text = con.text + (row % con.totallines)*con.linewidth;
 
+        float currentWidthLocation = cl_conXOffset->integer;
 		for (x=0 ; x<con.linewidth ; x++) {
-			if ( ( text[x] & 0xff ) == ' ' ) {
-				continue;
-			}
-
 			if ( ( (text[x]>>8)&7 ) != currentColor ) {
 				currentColor = (text[x]>>8)&7;
 				re.SetColor( g_color_table[currentColor] );
 			}
-			SCR_DrawSmallChar(  con.xadjust + (x+1)*SMALLCHAR_WIDTH, y, text[x] & 0xff );
+            
+            SCR_DrawConsoleFontChar(  con.xadjust + currentWidthLocation, y, text[x] & 0xff );
+            currentWidthLocation += SCR_ConsoleFontCharWidth( text[x] & 0xff );
 		}
 	}
 
@@ -555,7 +568,7 @@
 void Con_RunConsole (void) {
 	// decide on the destination height of the console
 	if ( Key_GetCatcher( ) & KEYCATCH_CONSOLE )
-		con.finalFrac = 0.5;		// half screen
+		con.finalFrac = MAX(0.10, 0.01 * cl_consoleHeight->integer);  // configured console percentage
 	else
 		con.finalFrac = 0;				// none visible
 	
Index: src/client/cl_keys.c
===================================================================
--- src/client/cl_keys.c	(revision 1117)
+++ src/client/cl_keys.c	(working copy)
@@ -369,7 +369,8 @@
 		i = drawLen - strlen( str );
 
 		if ( size == SMALLCHAR_WIDTH ) {
-			SCR_DrawSmallChar( x + ( edit->cursor - prestep - i ) * size, y, cursorChar );
+            float xlocation = x + SCR_ConsoleFontStringWidth( str, edit->cursor) ;
+            SCR_DrawConsoleFontChar( xlocation , y, cursorChar );
 		} else {
 			str[0] = cursorChar;
 			str[1] = 0;
Index: Makefile
===================================================================
--- Makefile	(revision 1117)
+++ Makefile	(working copy)
@@ -142,6 +142,10 @@
 BUILD_MASTER_SERVER=0
 endif
 
+ifndef USE_FREETYPE
+USE_FREETYPE=1
+endif
+
 #############################################################################
 
 BD=$(BUILD_DIR)/debug-$(PLATFORM)-$(ARCH)
@@ -239,6 +243,10 @@
     endif
   endif
 
+  ifeq ($(USE_FREETYPE),1)
+    BASE_CFLAGS += -DBUILD_FREETYPE $(shell freetype-config --cflags)
+  endif
+
   ifeq ($(USE_CURL),1)
     BASE_CFLAGS += -DUSE_CURL
     ifeq ($(USE_CURL_DLOPEN),1)
@@ -309,6 +317,10 @@
     BASE_CFLAGS += -I$(SDLHDIR)/include
   endif
 
+  ifeq ($(USE_FREETYPE),1)
+    CLIENT_LDFLAGS += -lfreetype
+  endif
+
   ifeq ($(ARCH),x86)
     # linux32 make ...
     BASE_CFLAGS += -m32
@@ -349,6 +361,10 @@
 
   BASE_CFLAGS += -fno-strict-aliasing -DMACOS_X -fno-common -pipe
 
+  ifeq ($(USE_FREETYPE),1)
+    BASE_CFLAGS += -DBUILD_FREETYPE $(shell freetype-config --cflags)
+  endif
+
   ifeq ($(USE_OPENAL),1)
     BASE_CFLAGS += -DUSE_OPENAL
     ifneq ($(USE_OPENAL_DLOPEN),1)
@@ -367,6 +383,10 @@
     endif
   endif
 
+  ifeq ($(USE_FREETYPE),1)
+    CLIENT_LDFLAGS += $(shell freetype-config --libs)
+  endif
+
   ifeq ($(USE_CODEC_VORBIS),1)
     BASE_CFLAGS += -DUSE_CODEC_VORBIS
     CLIENT_LDFLAGS += -lvorbisfile -lvorbis -logg
@@ -436,6 +456,11 @@
     endif
   endif
 
+  ifeq ($(USE_FREETYPE),1)
+    BASE_CFLAGS += -DBUILD_FREETYPE
+    BASE_CFLAGS += -I/include/freetype2
+  endif
+
   ifeq ($(USE_CODEC_VORBIS),1)
     BASE_CFLAGS += -DUSE_CODEC_VORBIS
   endif
@@ -455,6 +480,10 @@
   LDFLAGS= -lws2_32 -lwinmm
   CLIENT_LDFLAGS = -mwindows -lgdi32 -lole32 -lopengl32
 
+  ifeq ($(USE_FREETYPE),1)
+    CLIENT_LDFLAGS += -lfreetype
+  endif
+
   ifeq ($(USE_CURL),1)
     BASE_CFLAGS += -DUSE_CURL
     BASE_CFLAGS += $(CURL_CFLAGS)
